--- Description ---
This application is multi-platform wallpaper changer. It can change your wallpaper depending on daytime, date, (weather, cpu-temp not implemented yet).

I hope it will have gui in future, for now it works from command line only.

Main trouble is discovering how to change wallpaper on certain system or window manager, so I made it simple if someone knows how to change it,
just write a super simple plugin, that can do that, so everyone can enjoy it :)

You can use it to generate fractals or something like that using python imaging library and then use this application to set it as wallpaper, with
some conditions, there are no limits to ones imagination.


--- Plugins ---
name pluigns so they would correspond to settings.window_managers key and environment_detector ('gnome.py', 'kde.py', 'windows.py', 'macos.py')

each plugin function set_wallpaper that takes wallpaper image file with absolute or relative path and sets it as a desktop.
method needs to return True if success or False on error.
image_alpha attribute describes if windowmanager can process PNG files, if not set it defaults to False, that means program will save wallpaper as BMP


Example:
'mywindowmanager.py'
-----------------------------------------
# -*- coding: utf-8 -*-

import os

from common import BaseClass

image_alpha = False

def set_wallpaper(self, image_file_with_path):
    filepath = os.path.abspath(image_file_with_path)
    
    try:
        # try to set wallpaper
        # NOTE: this will work, but there is no way of telling if wallpaper was set or not, and also Exception below would occur only if imgfile would
        # be something horrible, so almost never
        call(['feh', '--bg-fill', imgfile])
        return True
    
    except Exception, e:
        self.log.error('%s Error while setting wallpaper image: %s, error was: %s' % (self.datetime.datetime.now(), image_file_with_path, e))
        return False

-----------------------------------------

--- Events ---
name events so they would correspond to settings.events
at each time at least one event provinding 'image' must be active!

event must have provides attribute (str) that specifies what this event does 'folder' or 'image'

only one 'folder' event may be active at the same time
event must have event function that takes **kwargs with data it needs to do what it does
**kwargs is passed from lib/event_handler.py from get_event_result where are kwargs set

event that has provides set to 'folder' must return unicode string with absolute path to images folder
event that has provides set to 'image' must return (u'/abs/path/to/image1', u'/abs/path/to/image2', alpha), alpha is float

you may have active more than one event that provide 'image', the program will merge them separately and then together

Example:
'myevent.py'
-----------------------------------------
# -*- coding: utf-8 -*-

import os

from lib.common import BaseClass
import settings

    
provides = 'folder'
        
def event(self, **kwargs):
    
    folder = 'kwargs.get('param1')/kwargs.get('param2')'

    return folder.decode('utf-8')
-----------------------------------------


--- lib.common ---
this is just convenience module that has log attribute for common logging scheme
this may contain more common attributes/functions in future 
