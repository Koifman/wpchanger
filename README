--- Description ---
This application is multi-platform wallpaper changer. It can change your wallpaper depending on daytime, (date, weather not implemented yet).

I hope it will have gui in future, for now it works from command line only.

Main trouble is discovering how to change wallpaper on certain system or window manager, so I made it simple if someone knows how to change it,
just write a super simple plugin, that can do that, so everyone can enjoy it :)

You can use it to generate fractals or something like that using python imaging library and then use this application to set it as wallpaper, with
some conditions, there are no limits to ones imagination.



--- Plugins ---
name pluigns so they would correspond to settings.window_managers key and environment_detector ('gnome.py', 'kde.py', 'windows.py', 'macos.py')

each plugin contains one class with method set_wallpaper that takes wallpaper image file with absolute or relative path and sets it as a desktop.
method needs to return True if success or False on error.
class needs to inherit from common.BaseClass and needs to have same name as the plugins name
must have parameter image_alpha set to False or True depending on ability to handle PNG files with alpha in them, if is set to False, program will save
wallpaper as BMP without alpha

class can then access logging in self.log and datetime in self.datetime

if you need to override __init__(self), make sure to call super(classname, self).__init__()!

Example:
'mywindowmanager.py'
-----------------------------------------
# -*- coding: utf-8 -*-

import os

from common import BaseClass

class mywindowmanager(BaseClass): # name class same way as file!
	image_alpha = False
	
	def set_wallpaper(image_file_with_path):
		filepath = os.path.abspath(image_file_with_path)
		
		try:
			# try to set wallpaper
			# NOTE: this will work, but there is no way of telling if wallpaper was set or not, and also Exception below would occur only if imgfile would
			# be something horrible, so almost never
			call(['feh', '--bg-fill', imgfile])
			return True
		
		except Exception, e:
			self.log.error('%s Error while setting wallpaper image: %s, error was: %s' % (self.datetime.datetime.now(), image_file_with_path, e))
			return False

-----------------------------------------

--- Events ---
name events so they would correspond to settings.events

each event must contain one class with same name as its filename e.g.: myevent.py, class myevent(object or BaseClass)
each class must contain provides attribute which is string 'folder' or 'image'
only one 'folder' event may be active at the same time
each class must contain params dict with following data: params = {'variable_name': 'call_that_would_retrieve_this_variable'}
each class must contain autoimport dict with following data: autoimport = {'import_as_name': 'what_to_import'}
each class must have method event() that will take arguments with same name as in above params

event that has provides set to 'folder' must return unicode string with absolute path to images folder
event that has provides set to 'image' must return (u'/abs/path/to/image1', u'/abs/path/to/image2', alpha), alpha is float

you may have active more than one event that provide 'image', the program will merge them separately and then together with alpha (100% / number of active 'image' events)

Example:
'myevent.py'
-----------------------------------------
# -*- coding: utf-8 -*-

import os

from lib.common import BaseClass
import settings

class myevent(BaseClass):
    
    provides = 'folder'
    params = {'param1': 'settings.images_dir',
              'param2': 'os.getcwd()'}
    autoimport = {'settings': 'settings', 
                  'os': 'os'}
            
    def event(self, param1, param2):
    	
    	folder = 'param1/param2'

        return folder.decode('utf-8')
-----------------------------------------


--- lib.common.BaseClass ---
this is just convenience class that provides access to program log, and some often used libraries (datetime)
you can access them by inheriting BaseClass in your class, then just do self.shared_method_or_attribute